#!/usr/bin/env bash

set -e

CYAN="\e[96m"
RED="\e[91m"
BGRED="\e[41m"
YELLOW="\e[93m"
reset="\e[39m"
resetBG="\e[49m"
defaultMemory=2048
version=1.0.0

docker_cluster_help()
{
printf "
$CYAN
#####################################
# Docker-Cluster Help 	            #
#####################################
$reset
docker-cluster version: ${version}
	
Usage:
  docker-cluster [command] [options]

Options:
  --help               Display this help message
  
Commands:
  create               Creates a manager, workers or clients, by default only manager
  scale                Adds more workers to the cluster
  destroy              Shut down and removes all of the machines
  run                  Runs the stack from a specified preset
  ls                   Lists all of the machines, swarm-members and running services
  ssh                  SSH into a given machine name, alias of docker-machine ssh
  test                 Sends http requests from the clients to the manager on port 80
  monitor              Opens a grafana on port 3000 in the browser
  visual               Opens a visualizer on port 8080 in the browser
  preset               Choose a preset from different compose files (default, load-balancer etc..)
";
}

docker_cluster_create_options()
{
printf "
${CYAN}
#####################################
# Docker-Cluster Help 	            #
#####################################
${reset}
docker-cluster version: ${version}
	
Usage:
  docker-cluster create [options]

Options:
  --help               Display this help message
  --memory             Memory for each machine, by default 2048MB
  --workers            Amount of workers to create
  --clients            Creates a machine with apache benchmark tool container for testing the cluster.
";
}

docker_cluster_scale_options()
{
printf "
${CYAN}
#####################################
# Docker-Cluster Help 	            #
#####################################
${reset}
docker-cluster version: ${version}
	
Usage:
  docker-cluster scale [options]

Options:
  --workers            Amount of additonal workers needed
  --clients            Amount of additonal clients needed
";
}

docker_cluster_destroy_help()
{
printf "
${CYAN}
#####################################
# Docker-Cluster Help 	            #
#####################################
${reset}
docker-cluster version: ${version}
	
Usage:
  docker-cluster destroy [list of names]

Options:
  --help               Display this help message
";	
}

docker_cluster_run_options()
{
printf "
${CYAN}
#####################################
# Docker-Cluster Help 	            #
#####################################
${reset}
docker-cluster version: ${version}
	
Usage:
  docker-cluster run [option]

Options:
  --help               Display this help message
  --preset             The folder name of the preset that should be run
";
}

docker_cluster_test_options()
{
printf "
${CYAN}
#####################################
# Docker-Cluster Help 	            #
#####################################
${reset}
docker-cluster version: ${version}
	
Usage:
  docker-cluster test [option]

Options:
  --help               Display this help message
  --requests           The amount of requests to send to the manager, port 80 by default
  --port               The port for testing
";
}

console()
{
	echo ""

	case $1 in
		"info")
			echo -e ">>> $2"
		;;
		"error")
			echo -e "$BGRED>>> $2 $resetBG"
		;;
		"warning")
			echo -e "$YELLOW>>> $2 $reset"
		;;
	esac
}


wait_for_it()
{
  	local retry=3
  	local tries=0
  	
  	while (( tries <= retry )); do
	    
	    tries=$((tries+1))
	    
	    if eval "curl -s $1"; then
	      echo
	      return 0
	    fi
    
    	echo -n '.'
    
    	sleep 1
	done

	echo "The requested address is unavailable.."
	return 1
}

create_manager()
{
	if [ $(docker-machine ls -q | grep "$1") ]; then
		echo "a manager already exists. Are you sure you want to recreate it ?"
		select yn in "Yes" "No"; do
		    case $yn in
		        Yes)
				destroy_node "manager"
			break;;
		        No)
				exit 0
			;;
		    esac
		done
	fi

	console "info" "Creating a manager machine with $1MB allocated memory..."
	docker-machine create --driver virtualbox --virtualbox-memory "$1" "manager"
	sleep 1

	console "info" "Mounting manager directories..."	
	mount_project_directories "manager"

	console "info" "Manager machine has been created, setting up the swarm-cluster..."
	local ip=$(docker-machine ip manager)
	docker-machine ssh manager docker swarm init --advertise-addr "$ip:2377">/dev/null
	eval $(docker-machine env manager)
}

mount_project_directories()
{
	docker-machine stop $1>/dev/null \
	&& "$VBOX_MSI_INSTALL_PATH/VBoxManage" sharedfolder add $1 --name "project" --hostpath "$(pwd)" --automount>/dev/null \
	&& docker-machine start $1>/dev/null
	console "info" "$(pwd) is now available on /project on the ${1} machine."
}

mount_web_directories()
{
	docker-machine stop $1>/dev/null \
	&& "$VBOX_MSI_INSTALL_PATH/VBoxManage" sharedfolder add $1 --name "www" --hostpath "$(pwd)/www" --automount>/dev/null \
	&& docker-machine start $1>/dev/null
	console "info" "$(pwd)/www is now available on /www on the ${1} machine."
}

create_worker()
{
	if [ $(docker-machine ls -q | grep "worker-$1") ]; then
		console "info" "worker-$1 already exists. Are you sure you want to recreate it ?"
		select yn in "Yes" "No"; do
		    case $yn in
		        Yes)
				destroy_node "worker-$1"
			break;;
		        No)
				exit 0
			;;
		    esac
		done
	fi

	console "info" "creating worker-$1 with $2MB allocated memory..."
	docker-machine create --driver virtualbox --virtualbox-memory "$2" "worker-$1"
	
	console "info" "Joining worker-$1 to the swarm-cluster..."
	local joinToken=$(docker-machine ssh manager docker swarm join-token worker -q)
	local ip=$(docker-machine ip manager)
	docker-machine ssh "worker-$1" docker swarm join --token "$joinToken" "$ip:2377"

	#console "info" "Mounting directories..."
	#mount_web_directories "worker-$1"
}

create_additional_worker()
{
	if [ $(docker-machine ls -q | grep "manager") ]; then
		local latestWorker=$(docker-machine ls -q | grep worker-* | wc -l)
		let nextWorker=$((latestWorker+1))

		create_worker $nextWorker ${memory:-$defaultMemory}
	else
		console "info" "Cannot scale without a manager. Run create first"
	fi
}

create_additional_client()
{
	if [ $(docker-machine ls -q | grep "manager") ]; then
		local latestClient=$(docker-machine ls -q | grep client-* | wc -l)
		let nextClient=$((latestClient+1))

		create_client $nextClient ${memory:-$defaultMemory}
	else
		console "info" "Cannot scale without a manager. Run create first"
	fi
}

create_client()
{
	if [ $(docker-machine ls -q | grep "client-$1") ]; then
		console "info" "client-$1 already exists. Are you sure you want to recreate it ?"
		select yn in "Yes" "No"; do
		    case $yn in
		        Yes)
				destroy_node "client-$1"
			break;;
		        No)
				exit 0
			;;
		    esac
		done
	fi

	console "info" "creating client-$1 with $2MB allocated memory..."
	docker-machine create --driver virtualbox --virtualbox-memory "$2" "client-$1"
	
	local ip=$(docker-machine ip manager)
	console "info" "Setting up the client's testing tools..."
	docker-machine ssh client-$1 docker pull jordi/ab>/dev/null
}

destroy_node()
{
	if [ ! "$(docker-machine ls -q | grep "$1")" ]; then
		console "error" "The name of the machine does not exists!"
		exit 1
	else
		docker-machine stop $1 \
		&& docker-machine rm $1
	fi
}

destroy_all()
{
	if [ "$(docker-machine ls -q)" ]; then
		docker-machine stop $(docker-machine ls -q)
		docker-machine rm $(docker-machine ls -q)
	else
		console "info" "There are no docker machines running."
	fi
}

destroy()
{
	if [ ! "$(docker-machine ls -q | grep "$1")" ]; then
		console "error" "The name of the machine does not exists!"
		exit 1
	else
		docker-machine ssh manager docker node rm $1 --force \
		&& destroy_node $1
	fi
}

execute_preset()
{
	directory="\/project/presets"

	if [ $(docker-machine ssh manager "[ -d $directory/$1 ]" && echo "OK") ]; then
		echo $directory/$1/docker-compose.yml
		docker-machine ssh manager docker stack deploy -c "$directory/$1/docker-compose.yml" $1
	else
		console "error" "The specified preset does not exists!"
	fi
}

open_browser_on_port()
{
	url="http://$1:$2"
	os="$(uname -s)"
	
	case "$os" in
	    Linux*)     
			xdg-open $url
		;;
	    Darwin*)    
			open $url
		;;
	    MINGW*)  # windows  
			start $url
		;;
	    *)          
			console info "Could not detect your default browser"
			exit 1
	esac
}

open_monitor()
{
	local managerIp="$(docker-machine ip manager)"
	local ports="3000:3000"
	local image="grafana/grafana"
	
	if [ ! "$(docker-machine ssh manager docker ps | grep grafana)" ]; then
		if [ ! "$(docker-machine ssh manager docker images | grep -w grafana/grafana)" ]; then
			console "info" "This might take a few seconds, downloading the image..."
			docker-machine ssh manager docker pull $image>/dev/null
		fi

		docker-machine ssh manager docker run -d --name grafana -p $ports $image>/dev/null
	fi

	if [ "$(wait_for_it http://$managerIp:3000)" ]; then
		console "info" "Opening grafana at http://${managerIp} on port 3000..."
		open_browser_on_port $managerIp "3000"
	fi
}

open_visualizer()
{
	local managerIp="$(docker-machine ip manager)"
	local volumes="\/var/run/docker.sock:\/var/run/docker.sock"
	local ports="8080:8080"
	local image="dockersamples/visualizer"

	if [ ! "$(docker-machine ssh manager docker ps | grep visual)" ]; then
		if [ ! "$(docker-machine ssh manager docker images | grep -w dockersamples/visualizer)" ]; then
			console "info" "This might take a few seconds, downloading the image..."
			docker-machine ssh manager docker pull $image>/dev/null
		fi

		docker-machine ssh manager docker run -d -ti --name visual -v $volumes -p $ports $image
	fi
	
	if [ "$(wait_for_it http://$managerIp:8080)" ]; then
		console "info" "Opening swarm-visualizer at http://${managerIp} on port 8080..."
		open_browser_on_port $managerIp "8080"
	fi
}

list_nodes()
{
	if [ "$(docker-machine ls -q)" ]; then
		echo "
###############################
# Running Docker Machines     #
###############################";
		docker-machine ls
		echo "
###############################
# Docker Swarm Members        #
###############################";
		docker-machine ssh manager docker node ls
		echo "
###############################
# Running Swarm Services      #
###############################";
		docker-machine ssh manager docker service ls
		echo "
###############################
# Overall Containers          #
###############################";
		docker-machine ssh manager docker ps -a; 
	else
		console "info" "There are no docker machines running. Run docker-cluster create --help"
	fi
}

install_docker_machine_cli()
{
	local OS=$OSTYPE || $OS

	case $OS in
		"windows"*|"msys"*)
			if [[ ! -d "$HOME/bin" ]]; then 
				mkdir -p "$HOME/bin"; 
			fi
				
			curl -L https://github.com/docker/machine/releases/download/v0.14.0/docker-machine-Windows-x86_64.exe > "$HOME/bin/docker-machine.exe"
			chmod +x "$HOME/bin/docker-machine.exe"
		;;
		"darwin"*)
			curl -L https://github.com/docker/machine/releases/download/v0.14.0/docker-machine-`uname -s`-`uname -m` >/usr/local/bin/docker-machine
  			chmod +x /usr/local/bin/docker-machine
		;;
		"linux"*)
			curl -L https://github.com/docker/machine/releases/download/v0.14.0/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine
			sudo install /tmp/docker-machine /usr/local/bin/docker-machine
		;;
	esac
}

ask_to_install()
{
	console "info" "docker-machine is a required dependecy and you don't have it installed. Want to install it ?"
	select yn in "Yes" "No"; do
	    case $yn in
	        Yes )
			install_docker_machine_cli
			console "info" "docker-machine client has been installed on the system successfuly!"
		break;;
	        No )
			exit 0
		;;
	    esac
	done
}

ssh_node()
{
	docker-machine ssh $1
}

test_cluster()
{
	if [[ $(docker-machine ls -q | grep "client-*") ]]; then
		managerIp=$(docker-machine ip manager)
		clients=$(docker-machine ls -q | grep "client-*")

		for client in $clients; do
			console "info" "Sending ${1} requests from $client to ${managerIp}:$2..."
			docker-machine ssh $client docker run --rm jordi/ab ab -k -c 100 -n $1 "http://${managerIp}:$2/" &
		done

		exit 0
	else
		console "error" "There are no client machines running for the test. Run docker-cluster create --clients [n]"
		exit 1
	fi
}

if ! [ -x "$(command -v docker-machine)" ]; then
	ask_to_install
fi

if [ $# -eq 0 ]; then
	docker_cluster_help
	exit 1
fi

commandName=$1

shift

options=("$@")

# Collect commands options
case $commandName in
	"create")
		for option in ${!options[@]}; do
			if [[ "${options[$option]}" == "--"* ]]; then		
				case "${options[$option]}" in 
					"--help")
						docker_cluster_create_options
						exit 0
					;;
					"--workers")
						workers=${options[$option+1]}
					;;
					"--memory")
						memory=${options[$option+1]}
					;;
					"--clients")
						clients=${options[$option+1]}
					;;
					"--wor"|"--worke"|"--worker")
						console "warning" "Unkown option. Did you mean --workers [n] ?"
						docker_cluster_create_options
						exit 1
					;;
					"--mem"|"--memo"|"--memor")
						console "warning" "Unkown option. Did you mean --memory [n] ?"
						docker_cluster_create_options
						exit 1
					;;
					"--cli"|"--clie"|"--clien"|"--client")
						console "warning" "Unkown option. Did you mean --clients [n] ?"
						docker_cluster_create_options
						exit 1
					;;
				esac
			fi
		done
	;;
	"scale")
		for option in ${!options[@]}; do	
			if [[ "${options[$option]}" == "--"* ]]; then
				case "${options[$option]}" in
					"--help")
						docker_cluster_scale_options
						exit 0
					;;
					"--workers")
						workers=${options[$option+1]}
					;;
					"--clients")
						clients=${options[$option+1]}
					;;
					"--wor"|"--work"|"--worke"|"--worker")
						console "warning" "Unkown option. Did you mean --workers [n] ?"
						docker_cluster_scale_options
						exit 1
					;;
					"--cli"|"--clie"|"--clien"|"--client")
						console "warning" "Unkown option. Did you mean --clients [n] ?"
						docker_cluster_create_options
						exit 1
					;;
				esac
			fi
		done
	;;
	"destroy")
		for option in ${!options[@]}; do	
			case "${options[$option]}" in
				"--help")
					docker_cluster_destroy_help
				;;
				"all")
					names="all"
				;;
				*)
					names=${options[@]}
				;;
			esac
		done
	;;
	"run")
		if [[ -z $options ]]; then
			console "info" "Use one of the following options.."
			docker_cluster_run_options
			exit 1
		fi

		for option in ${!options[@]}; do
			case "${options[$option]}" in
				"--help")
					docker_cluster_run_options
					exit 0
				;;
				"--preset")
					preset=${options[$option+1]}
				;;
			esac
		done
	;;
	"ssh")
		machine=${options}
	;;
	"test")
		if [[ -z $options ]]; then
			console "info" "Use one of the following options.."
			docker_cluster_test_options
			exit 1
		fi

		for option in ${!options[@]}; do
			if [[ "${options[$option]}" == "--"* ]]; then
				case "${options[$option]}" in
					"--help")
						docker_cluster_test_options
					;;
					"--requests")
						requestsCount=${options[$option+1]}
					;;
					"--port")
						testingPort=${options[$option+1]}
					;;
					*)
						docker_cluster_test_options
						exit 1
					;;
				esac
			fi
		done
	;;
	"ls"|"monitor"|"visual")
		
	;;
	*)
		docker_cluster_help
		exit 1;
	;;
esac

# Execute the requested commands
case $commandName in
	"create") # create manager, workers, clients
		if [ ! "$(docker-machine ls -q | grep manager)" ]; then
			create_manager ${memory:-$defaultMemory}
			console "info" "Manager machine is up and running!"
		fi

		if [ ! -z "$workers" ]; then
			for ((i=1; i <= $workers; i++)); do
			    create_worker ${i} ${memory:-$defaultMemory}
			done

			console "info" "All workers are up and running!"
		fi

		if [ ! -z "$clients" ]; then
			for ((i=1; i <= $clients; i++)); do
			    create_client ${i} ${memory:-$defaultMemory}
			done

			console "info" "All clients are up and running!"
		fi
	;;
	"scale") # scales the amount of workers
		if [ ! -z "$workers" ]; then
			console "info" "creating additonal ${workers} workers and joining them to the cluster..."
			for ((i=1; i <= $workers; i++)); do
				create_additional_worker ${memory:-$defaultMemory}
			done
		fi

		if [ ! -z "$clients" ]; then
			console "info" "creating additonal ${clients} client machines..."
			for ((i=1; i <= $clients; i++)); do
				create_additional_client ${memory:-$defaultMemory}
			done
		fi
	;;
	"destroy")
		if [ ! -z "$names" ]; then
			case $names in
				"all")
					destroy_all
					exit 0
				;;
				*)
					for name in $names; do 
						if [[ $name =~ client-* ]]; then
							destroy_node $name
						else
							destroy $name
						fi
					done
				;;	
			esac
		else
			console "info" "Did you mean docker-cluster destroy all ?"
			exit 1		
		fi
	;;
	"run")
		if [ ! -z "$preset" ]; then
			execute_preset ${preset:-default}
		fi
	;;
	"ls")
		list_nodes
	;;
	"ssh")
		if [[ $machine && $(docker-machine ls -q | grep ^$machine$) ]]; then 
			ssh_node $machine
		else
			console "info" "The machine you specify does not exist. Run docker-cluster ls to list your machines"
		fi
	;;
	"test")
		if [ ! "$(docker-machine ls -q | grep manager)" ]; then
			console "info" "First you have to create a manager machine to run the visualizer. Run docker-cluster create [options]"
			exit 1
		fi

		if [ ! -z "$requestsCount" ]; then
			test_cluster ${requestsCount:-100} ${testingPort:-80}
		fi
	;;
	"monitor")
		if [ ! "$(docker-machine ls -q | grep manager)" ]; then
			console "info" "First you have to create a manager machine to run the visualizer. Run docker-cluster create [options]"
			exit 1
		fi

		open_monitor
	;;
	"visual")
		if [ ! "$(docker-machine ls -q | grep manager)" ]; then
			console "info" "First you have to create a manager machine to run the visualizer. Run docker-cluster create [options]"
			exit 1
		fi

		open_visualizer
	;;
esac

exit 0