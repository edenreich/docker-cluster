#!/usr/bin/bash

set -e

BLUE=$(tput setaf 21)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)
reset=$(tput sgr0)
defaultMemory=2048
version=1.0.0

docker_cluster_help()
{
printf "
$BLUE
#####################################
# Docker-Cluster Help 	            #
#####################################
$reset
docker-cluster version: ${version}
	
Usage:
  docker-cluster [command] [options]

Options:
  --help               Display this help message
  --memory             Memory for each machine, by default 2048MB
  --workers            Amount of workers to create
  --workspace          Specify the working directory /host-directory:/guest-directory
  
Commands:
  create               Creates a virtualbox node or nodes
  scale                Adds more workers to the cluster
  reduce               Remove workers from the cluster
  destroy              Shut down and removes all of the machines
  ls                   Lists all of the machines
";
}

docker_cluster_create_options()
{
printf "
${BLUE}
#####################################
# Docker-Cluster Help 	            #
#####################################
${reset}
docker-cluster version: ${version}
	
Usage:
  docker-cluster create [options]

Options:
  --help               Display this help message
  --memory             Memory for each machine, by default 2048MB
  --workers            Amount of workers to create
  --workspace          Specify the working directory /host-directory:/guest-directory
";
}

console()
{
	echo ""

	case $1 in
		"info")
			echo ">>> $2"
		;;
		"error")
			echo "$RED>>> $2 $reset"
		;;
		"warning")
			echo "$YELLOW>>> $2 $reset"
		;;
	esac
}

create_manager()
{
	if [ $(docker-machine ls -q | grep "$1") ]; then
		echo "a manager already exists. Are you sure you want to recreate it ?"
		select yn in "Yes" "No"; do
		    case $yn in
		        Yes )
				destroy_node "manager"
			;;
		        No )
				exit 0
			;;
		    esac
		done
	fi

	console "info" "Creating a manager node with $1MB allocated memory.."
	docker-machine create --driver virtualbox --virtualbox-memory "$1" "manager"
	sleep 1
	console "info" "Manager machine has been created, setting up the swarm-cluster.."
	local ip=$(docker-machine ip manager)
	docker-machine ssh manager docker swarm init --advertise-addr "$ip:2377">/dev/null
}

create_worker()
{
	if [ $(docker-machine ls -q | grep "$1-$2") ]; then
		console "info" "$1-$2 already exists. Are you sure you want to recreate it ?"
		select yn in "Yes" "No"; do
		    case $yn in
		        Yes )
				destroy_node $1-$2 
			;;
		        No )
				exit 0
			;;
		    esac
		done
	fi

	console "info" "creating $1-$2 with $3MB allocated memory.."
	docker-machine create --driver virtualbox --virtualbox-memory "$3" "$1-$2"
	console "info" "Joining $1-$2 to the swarm-cluster.."
	local joinToken=$(docker-machine ssh manager docker swarm join-token worker -q)
	local ip=$(docker-machine ip manager)
	docker-machine ssh "$1-$2" docker swarm join --token "$joinToken" "$ip:2377"
}

create_additional_worker()
{
	if [ $(docker-machine ls -q | grep "manager") ]; then
		local latestWorker=$(docker-machine ls -q | grep worker-* | wc -l)
		let nextWorker=$((latestWorker+1))

		create_worker "worker" $nextWorker ${memory:-$defaultMemory}
	else
		console "info" "Cannot scale without a manager. Run create first"
	fi
}

destroy_node()
{
	docker-machine stop $1
	docker-machine rm $1 --force
}

destroy_nodes()
{
	docker-machine stop $(docker-machine ls -q)
	docker-machine rm $(docker-machine ls -q)
}

list_nodes()
{
	docker-machine ls
}

install_docker_machine_cli()
{
	local OS=$OSTYPE || $OS

	case $OS in
		"windows"*|"msys"*)
			if [[ ! -d "$HOME/bin" ]]; then 
				mkdir -p "$HOME/bin"; 
			fi
				
			curl -L https://github.com/docker/machine/releases/download/v0.14.0/docker-machine-Windows-x86_64.exe > "$HOME/bin/docker-machine.exe"
			chmod +x "$HOME/bin/docker-machine.exe"
		;;
		"darwin"*)
			curl -L https://github.com/docker/machine/releases/download/v0.14.0/docker-machine-`uname -s`-`uname -m` >/usr/local/bin/docker-machine
  			chmod +x /usr/local/bin/docker-machine
		;;
		"linux"*)
			curl -L https://github.com/docker/machine/releases/download/v0.14.0/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine
			sudo install /tmp/docker-machine /usr/local/bin/docker-machine
		;;
	esac
}

ask_to_install()
{
	console "info" "docker-machine is a required dependecy and you don't have it installed. Want to install it ?"
	select yn in "Yes" "No"; do
	    case $yn in
	        Yes )
			install_docker_machine_cli
			console "info" "docker-machine client has been installed on the system successfuly!"
		break;;
	        No )
			exit 0
		;;
	    esac
	done
}

if ! [ -x "$(command -v docker-machine)" ]; then
	ask_to_install
fi

if [ $# -eq 0 ]; then
	docker_cluster_help
	exit 1
fi

commandName=$1

shift

options=("$@")

# Collect commands options
case $commandName in
	"create")
		for option in ${!options[@]}; do
			if [[ "${options[$option]}" == "--"* ]]; then		
				case "${options[$option]}" in 
					"--help")
						docker_cluster_create_options
						exit 0
					;;
					"--workers")
						workers=${options[$option+1]}
					;;
					"--memory")
						memory=${options[$option+1]}
					;;
					"--wor"|"--worke"|"--worker")
						console "warning" "Unkown option. Did you mean --workers [n] ?"
						docker_cluster_create_options
						exit 1
					;;
					"--mem"|"--memo"|"--memor")
						console "warning" "Unkown option. Did you mean --memory [n] ?"
						docker_cluster_create_options
						exit 1
					;;
				esac
			fi
		done
	;;
	"scale")
		for option in ${!options[@]}; do	
			if [[ "${options[$option]}" == "--"* ]]; then
				case "${options[$option]}" in
					"--workers")
						workers=${options[$option+1]}
					;;
				esac
			fi
		done
	;;
	"destroy"|"ls")

	;;
	*)
		docker_cluster_help
		exit 1;
	;;
esac

# Execute the requested commands
case $commandName in
	"create")
		create_manager ${memory:-$defaultMemory}
		console "info" "Manager machine is up and running!"

		if [ ! -z "$workers" ]; then
			for ((i=1;i<=$workers;i++)); do
			    create_worker "worker" ${i} ${memory:-$defaultMemory}
			done

			console "info" "All workers are up and running!"
		fi
	;;
	"scale")
		if [ ! -z "$workers" ]; then
			for ((i=1;i<=$workers;i++)); do
				create_additional_worker ${memory:-$defaultMemory}
			done
		fi
	;;
	"reduce")
		# @todo reduce machines
	;;
	"destroy")
		destroy_nodes
	;;
	"ls")
		list_nodes
	;;
esac

exit 0
